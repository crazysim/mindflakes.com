#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do
  # If it's under blog and posts, it is probably an article unless set otherwise.
  items.select {|item| /^\/blog\/posts/.match(item.identifier) }.map do |item|
    item.attributes[:kind] ||= 'article'
  end

  # Parse date out of identifier and created_at_time attribute for articles and set it to created_at
  items.select {|item| item.attributes[:kind] == 'article'}.map do |post|
    year, month, day = /(\d{4})-(\d{1,2})-(\d{1,2})/.match(post.identifier).captures
    post.attributes[:created_at] ||= Time.parse([[year, month, day].join('-'),
                                               post.attributes[:created_at_time]].join(' '))
  end
end

# Styling and Javascript Asset Rules
compile '/assets/stylesheets/*/' do
  filter :sass, Compass.sass_engine_options
end

compile '/assets/javascripts/*' do
  filter :erb
  filter :concat_js
  if ENV['NANOC_ENV'] == 'production'
    filter :uglify_js
  end
end

## Do not write partials
route '/assets/stylesheets/_*/' do
  nil
end

route '/assets/stylesheets/*/' do
  item.identifier.chop + '.css'
end

route '/assets/javascripts/*' do
  item.identifier.chop + '.js'
end

# Blog Rules
compile '/blog/posts/*' do
  filter :erb
  # This is a workaround for not being able to customize how a language is detected with nanoc's
  # colorize_syntax filter with code fences
  filter :markdown_code_fence_colorize_adapter
  filter :redcarpet, :options => {fenced_code_blocks: true,
                                  autolink: true},
                    :renderer_options => {hard_wrap: false}
  filter :colorize_syntax, :default_colorizer => :pygmentsrb
  filter :typogruby
  layout 'post'
end

route '/blog/posts/*' do
  created_at = item.attributes[:created_at]
  year, month, day = created_at.year, created_at.month, created_at.day
  slug = /\d{1,2}-\d{1,2}\/(.+)\/$/.match(item.identifier).captures[0]
  "/blog/posts/#{year}/#{month}/#{day}/#{slug}/index.html"
end

## Atom
compile '/blog/atom/' do
  filter :haml
  # No layout
end

route '/blog/atom/' do
  '/blog/atom.xml'
end

## Sitemap
compile '/sitemap/' do
  filter :haml
  # No layout
end

route '/sitemap/' do
  '/sitemap.xml'
end

# Misc Rules
compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    if item[:extension] == 'haml'
      filter :haml
    else
      filter :erb
    end
    layout 'default'
  end
  filter :typogruby
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :haml
